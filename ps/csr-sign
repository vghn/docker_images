#!/usr/bin/env ruby
# Policy-based auto signing script for Puppet
# https://docs.puppet.com/puppet/latest/reference/ssl_autosign.html#policy-based-autosigning

require 'yaml'
require 'openssl'
require 'aws-sdk'

# Read CSR
@cert = ARGV[0]
@csr  = OpenSSL::X509::Request.new(STDIN.read)

# Load AWS SDK (EC2)
def ec2
  region = ENV['AWS_DEFAULT_REGION'] || 'us-east-1'
  if File.file?('/run/secrets/aws_access_key_id') && \
     File.file?('/run/secrets/aws_secret_access_key')
    Aws::EC2::Resource.new(
      region: region,
      credentials: Aws::Credentials.new(
        File.read('/run/secrets/aws_access_key_id').strip,
        File.read('/run/secrets/aws_secret_access_key').strip
      )
    )
  else
    Aws::EC2::Resource.new(region: region)
  end
end

# Configuration
def cfg
  YAML.load_file(ENV['AUTOSIGN_CFG'])
rescue => e
  STDERR.puts "Could not load the configuration file (#{e.message})!"
  return []
end

# Get a list of custom attributes
def atts
  @csr.attributes
end

# Get challenge password
def challenge_password
  atts.select { |att| att.oid == 'challengePassword' }
      .first.value.value.first.value.strip
rescue => e
  STDERR.puts "Could not find challengePassword in the attributes (#{e.message})!"
  return nil
end

# Get extensions
def exts
  atts.select { |att| att.oid == 'extReq' }
      .first.value.value.first.value
rescue => e
  STDERR.puts "Could not find other extensions in the attributes! (#{e.message})!"
  return []
end

# Get instance
def instance_id
  exts
    .map do |ext|
      if ext.value[0].value.strip == '1.3.6.1.4.1.34380.1.1.2'
        ext.value[1].value.gsub(/([\x00-\x1f])/, '').strip
      end
    end
    .compact.first
end

# Get image_name
def image_name
  exts
    .map do |ext|
      if ext.value[0].value.strip == '1.3.6.1.4.1.34380.1.1.3'
        ext.value[1].value.gsub(/([\x00-\x1f])/, '').strip
      end
    end
    .compact.first
end

# Get project
def project
  exts
    .map do |ext|
      if ext.value[0].value.strip == '1.3.6.1.4.1.34380.1.1.7'
        ext.value[1].value.gsub(/([\x00-\x1f])/, '').strip
      end
    end
    .compact.first
end

# Get role
def role
  exts
    .map do |ext|
      if ext.value[0].value.strip == '1.3.6.1.4.1.34380.1.1.13'
        ext.value[1].value.gsub(/([\x00-\x1f])/, '').strip
      end
    end
    .compact.first
end

# Get master password
def master_password
  cfg['challengePassword']
rescue => e
  STDERR.puts 'Could not find \'challengePassword\' in the configuration' \
       " (#{e.message})!"
  return nil
end

# Get project authorized password
def project_password
  cfg[project]['challengePassword']
rescue => e
  STDERR.puts 'Could not find challengePassword in the configuration for' \
       " project '#{project}' (#{e.message})!"
  return nil
end

# Sign if the master password matches
def check_master_password
  master_password && challenge_password == master_password
end

# Sign if the project password matches
def check_project_password
  project_password && challenge_password == project_password
end

# Sign if its a known instance
def check_instances_list
  ec2.instances.map(&:id).include?(instance_id)
rescue => e
  STDERR.puts "Could not get a list of instances (#{e.message})!"
  return false
end

# Sign if the base image is known
def check_images_list
  ec2.images(owners: ['self']).map(&:id).include?(image_name)
rescue => e
  STDERR.puts "Could not get a list of images (#{e.message})!"
  return false
end

# Authorization
STDERR.puts "Commencing validation for #{@cert}"
if atts.empty?
  STDERR.puts 'Authorization failed! The CSR has no attributes!'
  abort
elsif check_master_password
  STDERR.puts 'Node authorized based on the provided master challengePassword'
elsif check_project_password
  STDERR.puts 'Node authorized based on the provided project challengePassword'
elsif check_instances_list
  STDERR.puts "Node authorized based on instance id (#{instance_id})"
elsif check_images_list
  STDERR.puts "Node authorized based on image id (#{image_name})"
else
  STDERR.puts 'Authorization failed!'
  abort
end
STDERR.puts "Completed validation for #{@cert} - Signing CSR"
