#!/usr/bin/env ruby
# Policy-based auto signing script for Puppet
# https://docs.puppet.com/puppet/latest/reference/ssl_autosign.html#policy-based-autosigning

require 'yaml'
require 'logger'
require 'openssl'
require 'aws-sdk-ec2'
require 'aws-sdk-ssm'

# Read CSR
@cert = ARGV[0]
@csr  = OpenSSL::X509::Request.new(STDIN.read)

# Configure AWS SDK
region = ENV['AWS_DEFAULT_REGION'] || 'us-east-1'
Aws.config.update(region: region)

# Logging
def logger
  Logger.new('/tmp/csr-sign.log', level: 'INFO')
end

# AWS EC2
def ec2
  Aws::EC2::Resource.new
end

# AWS SSM
def ssm
  Aws::SSM::Client.new
end

# Configuration
def cfg
  @cfg ||= YAML.load_file(ENV['AUTOSIGN_CFG'])
rescue => error
  logger.error "Could not load the configuration file! (#{error.message})"
  {}
end

# Get a list of custom attributes
def atts
  @csr.attributes
rescue => error
  logger.error "Could not read the attributes! (#{error.message})"
  {}
end

# Get extensions
def exts
  atts.select { |att| att.oid == 'extReq' }
      .first.value.value.first.value
rescue => error
  logger.error 'Could not find other extensions in the attributes! ' \
    "(#{error.message})"
  {}
end

# Read extension value
def ext(oid, name)
  exts.map do |ext|
    if ext.value[0].value.strip == oid
      ext.value[1].value.gsub(/([\x00-\x1f])/, '').strip
    end
  end.compact.first
rescue => error
  logger.error "Could not find '#{name}' in the extension requets! " \
    "(#{error.message})"
  nil
end

# Get challenge password
def challenge_password
  atts.select { |att| att.oid == 'challengePassword' }
      .first.value.value.first.value.strip
rescue => error
  logger.error 'Could not find challengePassword in the custom attributes! ' \
    "(#{error.message})"
  nil
end

# Get instance
def instance_id
  ext('1.3.6.1.4.1.34380.1.1.2', 'pp_instance_id')
end

# Get image_name
def image_name
  ext('1.3.6.1.4.1.34380.1.1.3', 'pp_image_name')
end

# Get project
def project
  ext('1.3.6.1.4.1.34380.1.1.7', 'pp_project')
end

# Get role
def role
  ext('1.3.6.1.4.1.34380.1.1.13', 'pp_role')
end

# Get master password from the local configuration
def master_password
  cfg['challengePassword']
rescue => error
  logger.error 'Could not find \'challengePassword\' in the configuration! ' \
    "(#{error.message})"
  nil
end

# Get project authorized password from the local configuration
def project_password
  cfg[project]['challengePassword']
rescue => error
  logger.error 'Could not find \'challengePassword\' in the configuration for ' \
    "project '#{project}'! (#{error.message})"
  nil
end

# Get AWS SSM Parameter
def ssm_parameter(name)
  ssm.get_parameter({
    name: name,
    with_decryption: true,
  }).parameter.value
rescue Aws::SSM::Errors::ServiceError => error
  logger.error "Could not retrieve SSM parameter '#{name}' (#{error.message})"
  nil
end

# Get master password from AWS SSM Parameter Store
def master_password_ssm
  ssm_parameter('/puppet/csr/pwd')
rescue => error
  logger.error 'Could not find \'/puppet/csr/pwd\' in the SSM Parameter Store ' \
    "(#{error.message})"
  nil
end

# Get project authorized password from AWS SSM Parameter Store
def project_password_ssm
  ssm_parameter("/puppet/csr/#{project}/pwd")
rescue => error
  logger.error "Could not find \'/puppet/csr/#{project}/pwd\' " \
    "in the SSM Parameter Store (#{error.message})"
  nil
end

# Sign if the master password matches local config
def check_master_password
  challenge_password != nil && \
  challenge_password == master_password
end

# Sign if the master password matches SSM Parameter
def check_master_password_ssm
  challenge_password != nil && \
  challenge_password == master_password_ssm
end

# Sign if the project password matches local config
def check_project_password
  challenge_password != nil && \
  challenge_password == project_password
end

# Sign if the project password matches SSM Parameter
def check_project_password_ssm
  challenge_password != nil && \
  challenge_password == project_password_ssm
end

# Sign if its a known instance
def check_instances_list
  ec2.instances.map(&:id).include?(instance_id)
rescue => error
  logger.error "Could not get a list of instances (#{error.message})!"
  false
end

# Sign if the base image is known
def check_images_list
  ec2.images(owners: ['self']).map(&:id).include?(image_name)
rescue => error
  logger.error "Could not get a list of images (#{error.message})!"
  false
end

# Authorization
STDERR.puts "Commencing validation for #{@cert}"
if atts.empty?
  STDERR.puts 'Authorization failed! The CSR has no attributes!'
  abort
elsif check_master_password
  STDERR.puts 'Node authorized based on the provided master challengePassword'
elsif check_master_password_ssm
  STDERR.puts 'Node authorized based on the provided master challengePassword (SSM)'
elsif check_project_password
  STDERR.puts 'Node authorized based on the provided project challengePassword'
elsif check_project_password_ssm
  STDERR.puts 'Node authorized based on the provided project challengePassword (SSM)'
elsif check_instances_list
  STDERR.puts "Node authorized based on instance id (#{instance_id})"
elsif check_images_list
  STDERR.puts "Node authorized based on image id (#{image_name})"
else
  STDERR.puts 'Authorization failed!'
  abort
end
STDERR.puts "Completed validation for #{@cert} - Signing CSR"
